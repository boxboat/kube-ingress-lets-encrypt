---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ingress-cert-reflector
  namespace: "${NAMESPACE}"

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ingress-cert-reflector
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["${TLS_SECRET}"]
    verbs: ["get", "patch"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["list", "watch"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ingress-cert-reflector
subjects:
  - kind: ServiceAccount
    name: ingress-cert-reflector
    namespace: "${NAMESPACE}"
roleRef:
  kind: ClusterRole
  name: ingress-cert-reflector
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-cert-reflector
  namespace: "${NAMESPACE}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingress-cert-reflector
  template:
    metadata:
      labels:
        app: ingress-cert-reflector
    spec:
      serviceAccountName: ingress-cert-reflector
      containers:
        - name: ns-watch
          image: boxboat/kubectl:${KUBECTL_VERSION}
          command:
            - sh
            - -c
            - |
              set -e
              while true; do
                echo "$(date '+%Y-%m-%d %H:%M:%S') starting watch loop"
                kubectl get ns --watch --field-selector="status.phase==Active" --no-headers -o "custom-columns=:metadata.name" | \
                while read ns; do
                  echo "$(date '+%Y-%m-%d %H:%M:%S') namespace - $ns"
                  # Added a label based approach to deal with multiple secrets
                  kubectl -n "${NAMESPACE}" get secret -l ${REPLICATE_LABEL_NAME}==${REPLICATE_LABEL_VALUE} --no-headers -o "custom-columns=:metadata.name" | \
                  while read secret; do
                    export=$(kubectl -n "${NAMESPACE}" get secret "$secret" -o yaml --export)
                    echo "$export" | kubectl -n "$ns" apply -f -
                    echo "New Secret $secret copied to new namespace $ns"
                  done
                done
              done
        - name: secret-watch
          image: boxboat/kubectl:${KUBECTL_VERSION}
          command:
            - sh
            - -c
            - |
              set -e
              while true; do
                echo "$(date '+%Y-%m-%d %H:%M:%S') starting watch loop"
                # Added a label based approach to deal with multiple secrets
                kubectl -n "${NAMESPACE}" get secret --watch -l ${REPLICATE_LABEL_NAME}==${REPLICATE_LABEL_VALUE} --no-headers -o "custom-columns=:metadata.name" | \
                while read secret; do
                  export=$(kubectl -n "${NAMESPACE}" get secret "$secret" -o yaml --export)
                  for ns in $(kubectl get ns --field-selector="status.phase==Active" --no-headers -o "custom-columns=:metadata.name"); do
                    if [ "$ns" != "${NAMESPACE}" ]; then
                      echo "$(date '+%Y-%m-%d %H:%M:%S') namespace - $ns"
                      echo "$export" | kubectl -n "$ns" apply -f -
                      echo "New Secret $secret copied to new namespace $ns"
                    fi
                  done
                done
              done
